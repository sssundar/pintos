--------------------------------------------------------------------------------
CS124 - Project 6
Getting Started: Filesystem Cache
Goal: First Pass, Testing Caching, Eviction, Concurrency, and Wrappers 
This Document Contains: A Few To Do's
--------------------------------------------------------------------------------

Maintain the global filesystem lock (will be removed on second pass)

Modify inode read/write/seek/tell calls as called by file.c wrappers.
Eventually, remove system call sys_locks.

Inodes must now remember not the sector index on disk, but the sector in the
file cache. They point to the file disk_inode (containing the nested
listings numbering the relevant data sectors on disk).

	These pointers will only be null on first-open after a boot/close.
	Once we've gotten the file inode once, we'll have some value here.
	We cannot assume it's valid. 

Edge Cases Noted
----------------

More than 64 concurrent evictions attempted. Need a semaphore to allow
up to 64 evictions to proceed, but no more, and queue up any more that are
requested.

Should make sure that write_ahead stops eviction of that cache from happening.
	write_ahead will get r/w/e/ lock (e) and use it differently.

How should we handle file removal? We could have a deletion queue for an
inode and wait till everyone has closed it, then delete atomically?

Write-behind needs to modify dirty bit.